apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

android {
    def globalConfig = rootProject.extensions.getByName('ext')

    compileSdkVersion globalConfig['compileSdkVersion']
    buildToolsVersion globalConfig['buildToolsVersion']

    defaultConfig {
        applicationId globalConfig['applicationId']
        minSdkVersion globalConfig['minSdkVersion']
        targetSdkVersion globalConfig['targetSdkVersion']
        versionCode globalConfig['versionCode']
        versionName globalConfig['versionName']
        testInstrumentationRunner globalConfig['testInstrumentationRunner']

        // Enabling multidex support.
        multiDexEnabled true
    }

    signingConfigs {
        release {
            storeFile file(weatcherStoreLocation)
            storePassword weatcherStorePassword
            keyAlias weatcherKeyAlias
            keyPassword weatcherKeyPassword
        }
    }

    buildTypes {
        debug {
            versionNameSuffix '-DEBUG'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        development {
            applicationIdSuffix '.dev'
            resValue "string", "app_name", String.format("\"%s DEV\"", globalConfig['applicationName'])
            resValue "string", "google_maps_api_key", googleAPIKeyDev
        }
        production {
            resValue "string", "app_name", globalConfig['applicationName']
            resValue "string", "google_maps_api_key", googleAPIKeyProd
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    android.variantFilter{ variant ->
        if (variant.buildType.name == 'release' &&
                variant.flavors[0].name == 'development') {
            variant.setIgnore(true)
        }
    }
}

configurations {
    productionDebugCompile
    productionReleaseCompile
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    rootProject.ext.appDependencies.each {
        add(it.configuration, it.dependency, it.closure)
    }
    developmentCompile project(path: ':domain', configuration: 'debug')
    productionCompile project(path: ':domain', configuration: 'release')

    developmentCompile project(path: ':data', configuration: 'developmentDebug')
    productionDebugCompile project(path: ':data', configuration: 'productionDebug')
    productionReleaseCompile project(path: ':data', configuration: 'productionRelease')
}
